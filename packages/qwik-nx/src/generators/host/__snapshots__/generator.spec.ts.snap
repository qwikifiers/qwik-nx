// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/apps/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "/apps/frontend" 1`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-myhostapp",
  "projectType": "application",
  "root": "apps/frontend/myhostapp",
  "sourceRoot": "apps/frontend/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
        "runSequence": Array [
          "frontend-myhostapp:build.client",
          "frontend-myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/myhostapp/vite.config.ts",
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/apps/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "/apps/frontend" 2`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-remote1",
  "projectType": "application",
  "root": "apps/frontend/remote1",
  "sourceRoot": "apps/frontend/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
        "runSequence": Array [
          "frontend-remote1:build.client",
          "frontend-remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/remote1/vite.config.ts",
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "/frontend" 1`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-myhostapp",
  "projectType": "application",
  "root": "apps/frontend/myhostapp",
  "sourceRoot": "apps/frontend/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
        "runSequence": Array [
          "frontend-myhostapp:build.client",
          "frontend-myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/myhostapp/vite.config.ts",
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "/frontend" 2`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-remote1",
  "projectType": "application",
  "root": "apps/frontend/remote1",
  "sourceRoot": "apps/frontend/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
        "runSequence": Array [
          "frontend-remote1:build.client",
          "frontend-remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/remote1/vite.config.ts",
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/packages" should generate "myhostapp" and "remote1" with projects' roots at "packages/myhostapp" and "packages/remote1": "/packages" 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "myhostapp",
  "projectType": "application",
  "root": "packages/myhostapp",
  "sourceRoot": "packages/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/packages/myhostapp",
        "runSequence": Array [
          "myhostapp:build.client",
          "myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "packages/myhostapp/vite.config.ts",
        "outputPath": "dist/packages/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/packages/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "packages/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/packages/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/packages" should generate "myhostapp" and "remote1" with projects' roots at "packages/myhostapp" and "packages/remote1": "/packages" 2`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "remote1",
  "projectType": "application",
  "root": "packages/remote1",
  "sourceRoot": "packages/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/packages/remote1",
        "runSequence": Array [
          "remote1:build.client",
          "remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "packages/remote1/vite.config.ts",
        "outputPath": "dist/packages/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/packages/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "packages/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/packages/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/packages/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "packages/frontend/myhostapp" and "packages/frontend/remote1": "/packages/frontend" 1`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-myhostapp",
  "projectType": "application",
  "root": "packages/frontend/myhostapp",
  "sourceRoot": "packages/frontend/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/packages/frontend/myhostapp",
        "runSequence": Array [
          "frontend-myhostapp:build.client",
          "frontend-myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "packages/frontend/myhostapp/vite.config.ts",
        "outputPath": "dist/packages/frontend/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/packages/frontend/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "packages/frontend/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/packages/frontend/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "/packages/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "packages/frontend/myhostapp" and "packages/frontend/remote1": "/packages/frontend" 2`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-remote1",
  "projectType": "application",
  "root": "packages/frontend/remote1",
  "sourceRoot": "packages/frontend/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/packages/frontend/remote1",
        "runSequence": Array [
          "frontend-remote1:build.client",
          "frontend-remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "packages/frontend/remote1/vite.config.ts",
        "outputPath": "dist/packages/frontend/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/packages/frontend/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "packages/frontend/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/packages/frontend/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "apps" should generate "myhostapp" and "remote1" with projects' roots at "apps/myhostapp" and "apps/remote1": "apps" 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "myhostapp",
  "projectType": "application",
  "root": "apps/myhostapp",
  "sourceRoot": "apps/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/myhostapp",
        "runSequence": Array [
          "myhostapp:build.client",
          "myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/myhostapp/vite.config.ts",
        "outputPath": "dist/apps/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/apps/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "apps" should generate "myhostapp" and "remote1" with projects' roots at "apps/myhostapp" and "apps/remote1": "apps" 2`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "remote1",
  "projectType": "application",
  "root": "apps/remote1",
  "sourceRoot": "apps/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/remote1",
        "runSequence": Array [
          "remote1:build.client",
          "remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/remote1/vite.config.ts",
        "outputPath": "dist/apps/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/apps/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "apps/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "apps/frontend" 1`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-myhostapp",
  "projectType": "application",
  "root": "apps/frontend/myhostapp",
  "sourceRoot": "apps/frontend/myhostapp/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
        "runSequence": Array [
          "frontend-myhostapp:build.client",
          "frontend-myhostapp:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/myhostapp/vite.config.ts",
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/myhostapp",
      },
    },
    "preview": Object {
      "executor": "qwik-nx:micro-frontends-preview-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build",
        "port": 4173,
      },
    },
    "serve": Object {
      "executor": "qwik-nx:micro-frontends-dev-server",
      "options": Object {
        "buildTarget": "frontend-myhostapp:build.client",
        "mode": "ssr",
        "port": 5173,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/myhostapp",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/myhostapp",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should be able to resolve directory path based on the workspace layout when directory is "apps/frontend" should generate "frontend-myhostapp" and "frontend-remote1" with projects' roots at "apps/frontend/myhostapp" and "apps/frontend/remote1": "apps/frontend" 2`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "frontend-remote1",
  "projectType": "application",
  "root": "apps/frontend/remote1",
  "sourceRoot": "apps/frontend/remote1/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "preview": Object {},
      },
      "executor": "qwik-nx:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
        "runSequence": Array [
          "frontend-remote1:build.client",
          "frontend-remote1:build.ssr",
        ],
      },
    },
    "build.client": Object {
      "executor": "@nx/vite:build",
      "options": Object {
        "configFile": "apps/frontend/remote1/vite.config.ts",
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "build.ssr": Object {
      "configurations": Object {
        "preview": Object {
          "mode": "production",
          "ssr": "src/entry.preview.tsx",
        },
      },
      "defaultConfiguration": "preview",
      "executor": "@nx/vite:build",
      "options": Object {
        "outputPath": "dist/apps/frontend/remote1",
      },
    },
    "preview": Object {
      "executor": "@nx/vite:preview-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build",
        "port": 5174,
      },
    },
    "serve": Object {
      "executor": "@nx/vite:dev-server",
      "options": Object {
        "buildTarget": "frontend-remote1:build.client",
        "mode": "ssr",
        "port": 5174,
      },
    },
    "serve.debug": Object {
      "executor": "nx:run-commands",
      "options": Object {
        "command": "node --inspect-brk ../../../node_modules/vite/bin/vite.js --mode ssr --force",
        "cwd": "apps/frontend/remote1",
      },
    },
    "test": Object {
      "executor": "@nx/vite:test",
      "options": Object {
        "passWithNoTests": true,
        "reportsDirectory": "../../../coverage/apps/frontend/remote1",
      },
      "outputs": Array [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`host generator should run successfully 1`] = `
"import { qwikVite } from '@builder.io/qwik/optimizer';
import { qwikCity } from '@builder.io/qwik-city/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import { qwikNxVite } from 'qwik-nx/plugins';

export default defineConfig({
  cacheDir: '../../node_modules/.vite/apps/myhostapp',
  plugins: [
    qwikNxVite(),
    qwikCity(),
    qwikVite({
      client: {
        outDir: '../../dist/apps/myhostapp/client',
      },
      ssr: {
        outDir: '../../dist/apps/myhostapp/server',
      },
      tsconfigFileNames: ['tsconfig.app.json'],
    }),
    tsconfigPaths({ root: '../../' }),
  ],
  server: {
    fs: {
      // Allow serving files from the project root
      allow: ['../../'],
    },
  },
  preview: {
    headers: {
      'Cache-Control': 'public, max-age=600',
    },
  },
  test: {
    globals: true,
    cache: {
      dir: '../../node_modules/.vitest',
    },
    environment: 'node',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
});
"
`;

exports[`host generator should run successfully 2`] = `
"/**
 * WHAT IS THIS FILE?
 *
 * SSR entry point, in all cases the application is render outside the browser, this
 * entry point will be the common one.
 *
 * - Server (express, cloudflare...)
 * - npm run start
 * - npm run preview
 * - npm run build
 *
 */
import { renderToStream, RenderToStreamOptions } from '@builder.io/qwik/server';
import { manifest } from '@qwik-client-manifest';
import Root from './root';

export default function (opts: RenderToStreamOptions) {
  return renderToStream(<Root />, {
    manifest,
    ...opts,
    // Use container attributes to set attributes on the html tag.
    containerAttributes: {
      lang: 'en-us',
      ...opts.containerAttributes,
    },
    prefetchStrategy: {
      implementation: {
        linkInsert: null,
        workerFetchInsert: null,
        prefetchEvent: 'always',
      },
    },
    qwikLoader: {
      include: 'always',
    },
    streaming: {
      inOrder: {
        strategy: 'auto',
        maximunInitialChunk: 0,
        maximunChunk: 0,
      },
    },
  });
}
"
`;

exports[`host generator should run successfully 3`] = `
"{
  \\"name\\": \\"myhostapp\\",
  \\"$schema\\": \\"../../node_modules/nx/schemas/project-schema.json\\",
  \\"projectType\\": \\"application\\",
  \\"sourceRoot\\": \\"apps/myhostapp/src\\",
  \\"targets\\": {
    \\"build\\": {
      \\"executor\\": \\"qwik-nx:build\\",
      \\"options\\": {
        \\"runSequence\\": [\\"myhostapp:build.client\\", \\"myhostapp:build.ssr\\"],
        \\"outputPath\\": \\"dist/apps/myhostapp\\"
      },
      \\"configurations\\": {
        \\"preview\\": {}
      }
    },
    \\"build.client\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/myhostapp\\",
        \\"configFile\\": \\"apps/myhostapp/vite.config.ts\\"
      }
    },
    \\"build.ssr\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"defaultConfiguration\\": \\"preview\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/myhostapp\\"
      },
      \\"configurations\\": {
        \\"preview\\": {
          \\"ssr\\": \\"src/entry.preview.tsx\\",
          \\"mode\\": \\"production\\"
        }
      }
    },
    \\"preview\\": {
      \\"executor\\": \\"qwik-nx:micro-frontends-preview-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"myhostapp:build\\",
        \\"port\\": 4173
      }
    },
    \\"test\\": {
      \\"executor\\": \\"@nx/vite:test\\",
      \\"outputs\\": [\\"{options.reportsDirectory}\\"],
      \\"options\\": {
        \\"passWithNoTests\\": true,
        \\"reportsDirectory\\": \\"../../coverage/apps/myhostapp\\"
      }
    },
    \\"serve\\": {
      \\"executor\\": \\"qwik-nx:micro-frontends-dev-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"myhostapp:build.client\\",
        \\"mode\\": \\"ssr\\",
        \\"port\\": 5173
      }
    },
    \\"serve.debug\\": {
      \\"executor\\": \\"nx:run-commands\\",
      \\"options\\": {
        \\"command\\": \\"node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force\\",
        \\"cwd\\": \\"apps/myhostapp\\"
      }
    }
  },
  \\"tags\\": []
}
"
`;

exports[`host generator should run successfully 4`] = `
Array [
  Object {
    "path": ".prettierignore",
    "type": "CREATE",
  },
  Object {
    "path": ".prettierrc",
    "type": "CREATE",
  },
  Object {
    "path": "apps/.gitignore",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/.eslintrc.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/.prettierignore",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/package.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/project.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/public/favicon.svg",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/public/manifest.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/public/robots.txt",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/README.md",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/components/header/header.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/components/header/header.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/components/icons/qwik.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/components/remote-mfe/remote-mfe.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/components/router-head/router-head.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/config/remotes.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/entry.dev.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/entry.preview.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/entry.ssr.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/global.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/root.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/routes/about/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/routes/flower/flower.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/routes/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/routes/layout.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/src/routes/service-worker.ts",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/tsconfig.app.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/tsconfig.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/tsconfig.spec.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/myhostapp/vite.config.ts",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/.eslintrc.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/.prettierignore",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/package.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/project.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/public/favicon.svg",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/public/manifest.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/public/robots.txt",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/README.md",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/components/.gitkeep",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/components/header/header.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/entry.dev.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/entry.preview.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/entry.ssr.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/global.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/root.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/routes/about/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/routes/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/routes/layout.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/src/routes/service-worker.ts",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/tsconfig.app.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/tsconfig.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/tsconfig.spec.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote1/vite.config.ts",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/.eslintrc.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/.prettierignore",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/package.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/project.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/public/favicon.svg",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/public/manifest.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/public/robots.txt",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/README.md",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/components/.gitkeep",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/components/header/header.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/entry.dev.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/entry.preview.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/entry.ssr.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/global.,",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/root.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/routes/about/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/routes/index.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/routes/layout.tsx",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/src/routes/service-worker.ts",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/tsconfig.app.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/tsconfig.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/tsconfig.spec.json",
    "type": "CREATE",
  },
  Object {
    "path": "apps/remote2/vite.config.ts",
    "type": "CREATE",
  },
  Object {
    "path": "libs/.gitignore",
    "type": "CREATE",
  },
  Object {
    "path": "nx.json",
    "type": "CREATE",
  },
  Object {
    "path": "package.json",
    "type": "CREATE",
  },
  Object {
    "path": "tsconfig.base.json",
    "type": "CREATE",
  },
]
`;

exports[`host generator should run successfully 5`] = `
"import { qwikVite } from '@builder.io/qwik/optimizer';
import { qwikCity } from '@builder.io/qwik-city/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import { qwikNxVite } from 'qwik-nx/plugins';

export default defineConfig({
  cacheDir: '../../node_modules/.vite/apps/remote1',
  plugins: [
    qwikNxVite(),
    qwikCity(),
    qwikVite({
      client: {
        outDir: '../../dist/apps/remote1/client',
      },
      ssr: {
        outDir: '../../dist/apps/remote1/server',
      },
      tsconfigFileNames: ['tsconfig.app.json'],
    }),
    tsconfigPaths({ root: '../../' }),
  ],
  server: {
    fs: {
      // Allow serving files from the project root
      allow: ['../../'],
    },
  },
  preview: {
    headers: {
      'Cache-Control': 'public, max-age=600',
    },
  },
  test: {
    globals: true,
    cache: {
      dir: '../../node_modules/.vitest',
    },
    environment: 'node',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
});
"
`;

exports[`host generator should run successfully 6`] = `
"/**
 * WHAT IS THIS FILE?
 *
 * SSR entry point, in all cases the application is render outside the browser, this
 * entry point will be the common one.
 *
 * - Server (express, cloudflare...)
 * - npm run start
 * - npm run preview
 * - npm run build
 *
 */
import { renderToStream, RenderToStreamOptions } from '@builder.io/qwik/server';
import { manifest } from '@qwik-client-manifest';
import Root from './root';

export default function (opts: RenderToStreamOptions) {
  return renderToStream(<Root />, {
    manifest,
    ...opts,
    // Use container attributes to set attributes on the html tag.
    containerAttributes: {
      lang: 'en-us',
      ...opts.containerAttributes,
    },
    base: (opts) => {
      // removing query params from url and unifying to the form \\"http://localhost:5001/build/\\"
      return new URL(opts.serverData!.url).origin + '/build/';
    },
    prefetchStrategy: {
      implementation: {
        linkInsert: null,
        workerFetchInsert: null,
        prefetchEvent: 'always',
      },
    },
    containerTagName: 'div',
    qwikLoader: {
      include: 'never',
    },
  });
}
"
`;

exports[`host generator should run successfully 7`] = `
"{
  \\"name\\": \\"remote1\\",
  \\"$schema\\": \\"../../node_modules/nx/schemas/project-schema.json\\",
  \\"projectType\\": \\"application\\",
  \\"sourceRoot\\": \\"apps/remote1/src\\",
  \\"targets\\": {
    \\"build\\": {
      \\"executor\\": \\"qwik-nx:build\\",
      \\"options\\": {
        \\"runSequence\\": [\\"remote1:build.client\\", \\"remote1:build.ssr\\"],
        \\"outputPath\\": \\"dist/apps/remote1\\"
      },
      \\"configurations\\": {
        \\"preview\\": {}
      }
    },
    \\"build.client\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/remote1\\",
        \\"configFile\\": \\"apps/remote1/vite.config.ts\\"
      }
    },
    \\"build.ssr\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"defaultConfiguration\\": \\"preview\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/remote1\\"
      },
      \\"configurations\\": {
        \\"preview\\": {
          \\"ssr\\": \\"src/entry.preview.tsx\\",
          \\"mode\\": \\"production\\"
        }
      }
    },
    \\"preview\\": {
      \\"executor\\": \\"@nx/vite:preview-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"remote1:build\\",
        \\"port\\": 5174
      }
    },
    \\"test\\": {
      \\"executor\\": \\"@nx/vite:test\\",
      \\"outputs\\": [\\"{options.reportsDirectory}\\"],
      \\"options\\": {
        \\"passWithNoTests\\": true,
        \\"reportsDirectory\\": \\"../../coverage/apps/remote1\\"
      }
    },
    \\"serve\\": {
      \\"executor\\": \\"@nx/vite:dev-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"remote1:build.client\\",
        \\"mode\\": \\"ssr\\",
        \\"port\\": 5174
      }
    },
    \\"serve.debug\\": {
      \\"executor\\": \\"nx:run-commands\\",
      \\"options\\": {
        \\"command\\": \\"node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force\\",
        \\"cwd\\": \\"apps/remote1\\"
      }
    }
  },
  \\"tags\\": []
}
"
`;

exports[`host generator should run successfully 8`] = `
"import { qwikVite } from '@builder.io/qwik/optimizer';
import { qwikCity } from '@builder.io/qwik-city/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import { qwikNxVite } from 'qwik-nx/plugins';

export default defineConfig({
  cacheDir: '../../node_modules/.vite/apps/remote2',
  plugins: [
    qwikNxVite(),
    qwikCity(),
    qwikVite({
      client: {
        outDir: '../../dist/apps/remote2/client',
      },
      ssr: {
        outDir: '../../dist/apps/remote2/server',
      },
      tsconfigFileNames: ['tsconfig.app.json'],
    }),
    tsconfigPaths({ root: '../../' }),
  ],
  server: {
    fs: {
      // Allow serving files from the project root
      allow: ['../../'],
    },
  },
  preview: {
    headers: {
      'Cache-Control': 'public, max-age=600',
    },
  },
  test: {
    globals: true,
    cache: {
      dir: '../../node_modules/.vitest',
    },
    environment: 'node',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
});
"
`;

exports[`host generator should run successfully 9`] = `
"/**
 * WHAT IS THIS FILE?
 *
 * SSR entry point, in all cases the application is render outside the browser, this
 * entry point will be the common one.
 *
 * - Server (express, cloudflare...)
 * - npm run start
 * - npm run preview
 * - npm run build
 *
 */
import { renderToStream, RenderToStreamOptions } from '@builder.io/qwik/server';
import { manifest } from '@qwik-client-manifest';
import Root from './root';

export default function (opts: RenderToStreamOptions) {
  return renderToStream(<Root />, {
    manifest,
    ...opts,
    // Use container attributes to set attributes on the html tag.
    containerAttributes: {
      lang: 'en-us',
      ...opts.containerAttributes,
    },
    base: (opts) => {
      // removing query params from url and unifying to the form \\"http://localhost:5001/build/\\"
      return new URL(opts.serverData!.url).origin + '/build/';
    },
    prefetchStrategy: {
      implementation: {
        linkInsert: null,
        workerFetchInsert: null,
        prefetchEvent: 'always',
      },
    },
    containerTagName: 'div',
    qwikLoader: {
      include: 'never',
    },
  });
}
"
`;

exports[`host generator should run successfully 10`] = `
"{
  \\"name\\": \\"remote2\\",
  \\"$schema\\": \\"../../node_modules/nx/schemas/project-schema.json\\",
  \\"projectType\\": \\"application\\",
  \\"sourceRoot\\": \\"apps/remote2/src\\",
  \\"targets\\": {
    \\"build\\": {
      \\"executor\\": \\"qwik-nx:build\\",
      \\"options\\": {
        \\"runSequence\\": [\\"remote2:build.client\\", \\"remote2:build.ssr\\"],
        \\"outputPath\\": \\"dist/apps/remote2\\"
      },
      \\"configurations\\": {
        \\"preview\\": {}
      }
    },
    \\"build.client\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/remote2\\",
        \\"configFile\\": \\"apps/remote2/vite.config.ts\\"
      }
    },
    \\"build.ssr\\": {
      \\"executor\\": \\"@nx/vite:build\\",
      \\"defaultConfiguration\\": \\"preview\\",
      \\"options\\": {
        \\"outputPath\\": \\"dist/apps/remote2\\"
      },
      \\"configurations\\": {
        \\"preview\\": {
          \\"ssr\\": \\"src/entry.preview.tsx\\",
          \\"mode\\": \\"production\\"
        }
      }
    },
    \\"preview\\": {
      \\"executor\\": \\"@nx/vite:preview-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"remote2:build\\",
        \\"port\\": 5175
      }
    },
    \\"test\\": {
      \\"executor\\": \\"@nx/vite:test\\",
      \\"outputs\\": [\\"{options.reportsDirectory}\\"],
      \\"options\\": {
        \\"passWithNoTests\\": true,
        \\"reportsDirectory\\": \\"../../coverage/apps/remote2\\"
      }
    },
    \\"serve\\": {
      \\"executor\\": \\"@nx/vite:dev-server\\",
      \\"options\\": {
        \\"buildTarget\\": \\"remote2:build.client\\",
        \\"mode\\": \\"ssr\\",
        \\"port\\": 5175
      }
    },
    \\"serve.debug\\": {
      \\"executor\\": \\"nx:run-commands\\",
      \\"options\\": {
        \\"command\\": \\"node --inspect-brk ../../node_modules/vite/bin/vite.js --mode ssr --force\\",
        \\"cwd\\": \\"apps/remote2\\"
      }
    }
  },
  \\"tags\\": []
}
"
`;
